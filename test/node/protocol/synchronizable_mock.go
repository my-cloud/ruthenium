// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package protocol

import (
	"github.com/my-cloud/ruthenium/src/api/node"
	"github.com/my-cloud/ruthenium/src/api/node/network"
	"sync"
)

// Ensure, that SynchronizableMock does implement Synchronizable.
// If this is not the case, regenerate this file with moq.
var _ network.Synchronizable = &SynchronizableMock{}

// SynchronizableMock is a mock implementation of Synchronizable.
//
// 	func TestSomethingThatUsesSynchronizable(t *testing.T) {
//
// 		// make and configure a mocked Synchronizable
// 		mockedSynchronizable := &SynchronizableMock{
// 			AddTargetsFunc: func(request []node.TargetRequest)  {
// 				panic("mock out the AddTargets method")
// 			},
// 			NeighborsFunc: func() []Requestable {
// 				panic("mock out the Neighbors method")
// 			},
// 			StartSynchronizationFunc: func()  {
// 				panic("mock out the StartSynchronization method")
// 			},
// 			SynchronizeFunc: func()  {
// 				panic("mock out the Synchronize method")
// 			},
// 			WaitFunc: func()  {
// 				panic("mock out the Wait method")
// 			},
// 		}
//
// 		// use mockedSynchronizable in code that requires Synchronizable
// 		// and then make assertions.
//
// 	}
type SynchronizableMock struct {
	// AddTargetsFunc mocks the AddTargets method.
	AddTargetsFunc func(request []node.TargetRequest)

	// NeighborsFunc mocks the Neighbors method.
	NeighborsFunc func() []network.Requestable

	// StartSynchronizationFunc mocks the StartSynchronization method.
	StartSynchronizationFunc func()

	// SynchronizeFunc mocks the Synchronize method.
	SynchronizeFunc func()

	// WaitFunc mocks the Wait method.
	WaitFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// AddTargets holds details about calls to the AddTargets method.
		AddTargets []struct {
			// Request is the request argument value.
			Request []node.TargetRequest
		}
		// Neighbors holds details about calls to the Neighbors method.
		Neighbors []struct {
		}
		// StartSynchronization holds details about calls to the StartSynchronization method.
		StartSynchronization []struct {
		}
		// Synchronize holds details about calls to the Synchronize method.
		Synchronize []struct {
		}
		// Wait holds details about calls to the Wait method.
		Wait []struct {
		}
	}
	lockAddTargets           sync.RWMutex
	lockNeighbors            sync.RWMutex
	lockStartSynchronization sync.RWMutex
	lockSynchronize          sync.RWMutex
	lockWait                 sync.RWMutex
}

// AddTargets calls AddTargetsFunc.
func (mock *SynchronizableMock) AddTargets(request []node.TargetRequest) {
	if mock.AddTargetsFunc == nil {
		panic("SynchronizableMock.AddTargetsFunc: method is nil but Synchronizable.AddTargets was just called")
	}
	callInfo := struct {
		Request []node.TargetRequest
	}{
		Request: request,
	}
	mock.lockAddTargets.Lock()
	mock.calls.AddTargets = append(mock.calls.AddTargets, callInfo)
	mock.lockAddTargets.Unlock()
	mock.AddTargetsFunc(request)
}

// AddTargetsCalls gets all the calls that were made to AddTargets.
// Check the length with:
//     len(mockedSynchronizable.AddTargetsCalls())
func (mock *SynchronizableMock) AddTargetsCalls() []struct {
	Request []node.TargetRequest
} {
	var calls []struct {
		Request []node.TargetRequest
	}
	mock.lockAddTargets.RLock()
	calls = mock.calls.AddTargets
	mock.lockAddTargets.RUnlock()
	return calls
}

// Neighbors calls NeighborsFunc.
func (mock *SynchronizableMock) Neighbors() []network.Requestable {
	if mock.NeighborsFunc == nil {
		panic("SynchronizableMock.NeighborsFunc: method is nil but Synchronizable.Neighbors was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNeighbors.Lock()
	mock.calls.Neighbors = append(mock.calls.Neighbors, callInfo)
	mock.lockNeighbors.Unlock()
	return mock.NeighborsFunc()
}

// NeighborsCalls gets all the calls that were made to Neighbors.
// Check the length with:
//     len(mockedSynchronizable.NeighborsCalls())
func (mock *SynchronizableMock) NeighborsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNeighbors.RLock()
	calls = mock.calls.Neighbors
	mock.lockNeighbors.RUnlock()
	return calls
}

// StartSynchronization calls StartSynchronizationFunc.
func (mock *SynchronizableMock) StartSynchronization() {
	if mock.StartSynchronizationFunc == nil {
		panic("SynchronizableMock.StartSynchronizationFunc: method is nil but Synchronizable.StartSynchronization was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStartSynchronization.Lock()
	mock.calls.StartSynchronization = append(mock.calls.StartSynchronization, callInfo)
	mock.lockStartSynchronization.Unlock()
	mock.StartSynchronizationFunc()
}

// StartSynchronizationCalls gets all the calls that were made to StartSynchronization.
// Check the length with:
//     len(mockedSynchronizable.StartSynchronizationCalls())
func (mock *SynchronizableMock) StartSynchronizationCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStartSynchronization.RLock()
	calls = mock.calls.StartSynchronization
	mock.lockStartSynchronization.RUnlock()
	return calls
}

// Synchronize calls SynchronizeFunc.
func (mock *SynchronizableMock) Synchronize() {
	if mock.SynchronizeFunc == nil {
		panic("SynchronizableMock.SynchronizeFunc: method is nil but Synchronizable.Synchronize was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSynchronize.Lock()
	mock.calls.Synchronize = append(mock.calls.Synchronize, callInfo)
	mock.lockSynchronize.Unlock()
	mock.SynchronizeFunc()
}

// SynchronizeCalls gets all the calls that were made to Synchronize.
// Check the length with:
//     len(mockedSynchronizable.SynchronizeCalls())
func (mock *SynchronizableMock) SynchronizeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSynchronize.RLock()
	calls = mock.calls.Synchronize
	mock.lockSynchronize.RUnlock()
	return calls
}

// Wait calls WaitFunc.
func (mock *SynchronizableMock) Wait() {
	if mock.WaitFunc == nil {
		panic("SynchronizableMock.WaitFunc: method is nil but Synchronizable.Wait was just called")
	}
	callInfo := struct {
	}{}
	mock.lockWait.Lock()
	mock.calls.Wait = append(mock.calls.Wait, callInfo)
	mock.lockWait.Unlock()
	mock.WaitFunc()
}

// WaitCalls gets all the calls that were made to Wait.
// Check the length with:
//     len(mockedSynchronizable.WaitCalls())
func (mock *SynchronizableMock) WaitCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockWait.RLock()
	calls = mock.calls.Wait
	mock.lockWait.RUnlock()
	return calls
}
