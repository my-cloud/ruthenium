// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package protocol

import (
	"github.com/my-cloud/ruthenium/src/node/neighborhood"
	"github.com/my-cloud/ruthenium/src/node/protocol"
	"sync"
)

// Ensure, that SynchronizerMock does implement Synchronizer.
// If this is not the case, regenerate this file with moq.
var _ protocol.Synchronizer = &SynchronizerMock{}

// SynchronizerMock is a mock implementation of Synchronizer.
//
// 	func TestSomethingThatUsesSynchronizer(t *testing.T) {
//
// 		// make and configure a mocked Synchronizer
// 		mockedSynchronizer := &SynchronizerMock{
// 			NeighborsFunc: func() []neighborhood.Neighbor {
// 				panic("mock out the Neighbors method")
// 			},
// 		}
//
// 		// use mockedSynchronizer in code that requires Synchronizer
// 		// and then make assertions.
//
// 	}
type SynchronizerMock struct {
	// NeighborsFunc mocks the Neighbors method.
	NeighborsFunc func() []neighborhood.Neighbor

	// calls tracks calls to the methods.
	calls struct {
		// Neighbors holds details about calls to the Neighbors method.
		Neighbors []struct {
		}
	}
	lockNeighbors sync.RWMutex
}

// Neighbors calls NeighborsFunc.
func (mock *SynchronizerMock) Neighbors() []neighborhood.Neighbor {
	if mock.NeighborsFunc == nil {
		panic("SynchronizerMock.NeighborsFunc: method is nil but Synchronizer.Neighbors was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNeighbors.Lock()
	mock.calls.Neighbors = append(mock.calls.Neighbors, callInfo)
	mock.lockNeighbors.Unlock()
	return mock.NeighborsFunc()
}

// NeighborsCalls gets all the calls that were made to Neighbors.
// Check the length with:
//     len(mockedSynchronizer.NeighborsCalls())
func (mock *SynchronizerMock) NeighborsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNeighbors.RLock()
	calls = mock.calls.Neighbors
	mock.lockNeighbors.RUnlock()
	return calls
}
