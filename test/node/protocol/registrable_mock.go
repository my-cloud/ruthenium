// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package protocol

import (
	"github.com/my-cloud/ruthenium/src/api/humanity"
	"sync"
)

// Ensure, that RegistrableMock does implement Registrable.
// If this is not the case, regenerate this file with moq.
var _ humanity.Registrable = &RegistrableMock{}

// RegistrableMock is a mock implementation of Registrable.
//
// 	func TestSomethingThatUsesRegistrable(t *testing.T) {
//
// 		// make and configure a mocked Registrable
// 		mockedRegistrable := &RegistrableMock{
// 			IsRegisteredFunc: func(address string) (bool, error) {
// 				panic("mock out the IsRegistered method")
// 			},
// 		}
//
// 		// use mockedRegistrable in code that requires Registrable
// 		// and then make assertions.
//
// 	}
type RegistrableMock struct {
	// IsRegisteredFunc mocks the IsRegistered method.
	IsRegisteredFunc func(address string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// IsRegistered holds details about calls to the IsRegistered method.
		IsRegistered []struct {
			// Address is the address argument value.
			Address string
		}
	}
	lockIsRegistered sync.RWMutex
}

// IsRegistered calls IsRegisteredFunc.
func (mock *RegistrableMock) IsRegistered(address string) (bool, error) {
	if mock.IsRegisteredFunc == nil {
		panic("RegistrableMock.IsRegisteredFunc: method is nil but Registrable.IsRegistered was just called")
	}
	callInfo := struct {
		Address string
	}{
		Address: address,
	}
	mock.lockIsRegistered.Lock()
	mock.calls.IsRegistered = append(mock.calls.IsRegistered, callInfo)
	mock.lockIsRegistered.Unlock()
	return mock.IsRegisteredFunc(address)
}

// IsRegisteredCalls gets all the calls that were made to IsRegistered.
// Check the length with:
//     len(mockedRegistrable.IsRegisteredCalls())
func (mock *RegistrableMock) IsRegisteredCalls() []struct {
	Address string
} {
	var calls []struct {
		Address string
	}
	mock.lockIsRegistered.RLock()
	calls = mock.calls.IsRegistered
	mock.lockIsRegistered.RUnlock()
	return calls
}
