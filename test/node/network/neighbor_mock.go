// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package network

import (
	"github.com/my-cloud/ruthenium/src/node/network"
	"sync"
)

// Ensure, that NeighborMock does implement Neighbor.
// If this is not the case, regenerate this file with moq.
var _ network.Neighbor = &NeighborMock{}

// NeighborMock is a mock implementation of Neighbor.
//
// 	func TestSomethingThatUsesNeighbor(t *testing.T) {
//
// 		// make and configure a mocked Neighbor
// 		mockedNeighbor := &NeighborMock{
// 			AddTransactionFunc: func(request TransactionRequest) error {
// 				panic("mock out the AddTransaction method")
// 			},
// 			GetAmountFunc: func(request AmountRequest) (*AmountResponse, error) {
// 				panic("mock out the GetAmount method")
// 			},
// 			GetBlocksFunc: func() ([]*BlockResponse, error) {
// 				panic("mock out the GetBlocks method")
// 			},
// 			GetTransactionsFunc: func() ([]TransactionResponse, error) {
// 				panic("mock out the GetTransactions method")
// 			},
// 			IpFunc: func() string {
// 				panic("mock out the Ip method")
// 			},
// 			MineFunc: func() error {
// 				panic("mock out the Mine method")
// 			},
// 			PortFunc: func() uint16 {
// 				panic("mock out the Port method")
// 			},
// 			SendTargetsFunc: func(request []TargetRequest) error {
// 				panic("mock out the SendTargets method")
// 			},
// 			StartMiningFunc: func() error {
// 				panic("mock out the StartMining method")
// 			},
// 			StopMiningFunc: func() error {
// 				panic("mock out the StopMining method")
// 			},
// 			TargetFunc: func() string {
// 				panic("mock out the Target method")
// 			},
// 		}
//
// 		// use mockedNeighbor in code that requires Neighbor
// 		// and then make assertions.
//
// 	}
type NeighborMock struct {
	// AddTransactionFunc mocks the AddTransaction method.
	AddTransactionFunc func(request network.TransactionRequest) error

	// GetAmountFunc mocks the GetAmount method.
	GetAmountFunc func(request network.AmountRequest) (*network.AmountResponse, error)

	// GetBlocksFunc mocks the GetBlocks method.
	GetBlocksFunc func() ([]*network.BlockResponse, error)

	// GetTransactionsFunc mocks the GetTransactions method.
	GetTransactionsFunc func() ([]network.TransactionResponse, error)

	// IpFunc mocks the Ip method.
	IpFunc func() string

	// MineFunc mocks the Mine method.
	MineFunc func() error

	// PortFunc mocks the Port method.
	PortFunc func() uint16

	// SendTargetsFunc mocks the SendTargets method.
	SendTargetsFunc func(request []network.TargetRequest) error

	// StartMiningFunc mocks the StartMining method.
	StartMiningFunc func() error

	// StopMiningFunc mocks the StopMining method.
	StopMiningFunc func() error

	// TargetFunc mocks the Target method.
	TargetFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// AddTransaction holds details about calls to the AddTransaction method.
		AddTransaction []struct {
			// Request is the request argument value.
			Request network.TransactionRequest
		}
		// GetAmount holds details about calls to the GetAmount method.
		GetAmount []struct {
			// Request is the request argument value.
			Request network.AmountRequest
		}
		// GetBlocks holds details about calls to the GetBlocks method.
		GetBlocks []struct {
		}
		// GetTransactions holds details about calls to the GetTransactions method.
		GetTransactions []struct {
		}
		// Ip holds details about calls to the Ip method.
		Ip []struct {
		}
		// Mine holds details about calls to the Mine method.
		Mine []struct {
		}
		// Port holds details about calls to the Port method.
		Port []struct {
		}
		// SendTargets holds details about calls to the SendTargets method.
		SendTargets []struct {
			// Request is the request argument value.
			Request []network.TargetRequest
		}
		// StartMining holds details about calls to the StartMining method.
		StartMining []struct {
		}
		// StopMining holds details about calls to the StopMining method.
		StopMining []struct {
		}
		// Target holds details about calls to the Target method.
		Target []struct {
		}
	}
	lockAddTransaction  sync.RWMutex
	lockGetAmount       sync.RWMutex
	lockGetBlocks       sync.RWMutex
	lockGetTransactions sync.RWMutex
	lockIp              sync.RWMutex
	lockMine            sync.RWMutex
	lockPort            sync.RWMutex
	lockSendTargets     sync.RWMutex
	lockStartMining     sync.RWMutex
	lockStopMining      sync.RWMutex
	lockTarget          sync.RWMutex
}

// AddTransaction calls AddTransactionFunc.
func (mock *NeighborMock) AddTransaction(request network.TransactionRequest) error {
	if mock.AddTransactionFunc == nil {
		panic("NeighborMock.AddTransactionFunc: method is nil but Neighbor.AddTransaction was just called")
	}
	callInfo := struct {
		Request network.TransactionRequest
	}{
		Request: request,
	}
	mock.lockAddTransaction.Lock()
	mock.calls.AddTransaction = append(mock.calls.AddTransaction, callInfo)
	mock.lockAddTransaction.Unlock()
	return mock.AddTransactionFunc(request)
}

// AddTransactionCalls gets all the calls that were made to AddTransaction.
// Check the length with:
//     len(mockedNeighbor.AddTransactionCalls())
func (mock *NeighborMock) AddTransactionCalls() []struct {
	Request network.TransactionRequest
} {
	var calls []struct {
		Request network.TransactionRequest
	}
	mock.lockAddTransaction.RLock()
	calls = mock.calls.AddTransaction
	mock.lockAddTransaction.RUnlock()
	return calls
}

// GetAmount calls GetAmountFunc.
func (mock *NeighborMock) GetAmount(request network.AmountRequest) (*network.AmountResponse, error) {
	if mock.GetAmountFunc == nil {
		panic("NeighborMock.GetAmountFunc: method is nil but Neighbor.GetAmount was just called")
	}
	callInfo := struct {
		Request network.AmountRequest
	}{
		Request: request,
	}
	mock.lockGetAmount.Lock()
	mock.calls.GetAmount = append(mock.calls.GetAmount, callInfo)
	mock.lockGetAmount.Unlock()
	return mock.GetAmountFunc(request)
}

// GetAmountCalls gets all the calls that were made to GetAmount.
// Check the length with:
//     len(mockedNeighbor.GetAmountCalls())
func (mock *NeighborMock) GetAmountCalls() []struct {
	Request network.AmountRequest
} {
	var calls []struct {
		Request network.AmountRequest
	}
	mock.lockGetAmount.RLock()
	calls = mock.calls.GetAmount
	mock.lockGetAmount.RUnlock()
	return calls
}

// GetBlocks calls GetBlocksFunc.
func (mock *NeighborMock) GetBlocks() ([]*network.BlockResponse, error) {
	if mock.GetBlocksFunc == nil {
		panic("NeighborMock.GetBlocksFunc: method is nil but Neighbor.GetBlocks was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetBlocks.Lock()
	mock.calls.GetBlocks = append(mock.calls.GetBlocks, callInfo)
	mock.lockGetBlocks.Unlock()
	return mock.GetBlocksFunc()
}

// GetBlocksCalls gets all the calls that were made to GetBlocks.
// Check the length with:
//     len(mockedNeighbor.GetBlocksCalls())
func (mock *NeighborMock) GetBlocksCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetBlocks.RLock()
	calls = mock.calls.GetBlocks
	mock.lockGetBlocks.RUnlock()
	return calls
}

// GetTransactions calls GetTransactionsFunc.
func (mock *NeighborMock) GetTransactions() ([]network.TransactionResponse, error) {
	if mock.GetTransactionsFunc == nil {
		panic("NeighborMock.GetTransactionsFunc: method is nil but Neighbor.GetTransactions was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetTransactions.Lock()
	mock.calls.GetTransactions = append(mock.calls.GetTransactions, callInfo)
	mock.lockGetTransactions.Unlock()
	return mock.GetTransactionsFunc()
}

// GetTransactionsCalls gets all the calls that were made to GetTransactions.
// Check the length with:
//     len(mockedNeighbor.GetTransactionsCalls())
func (mock *NeighborMock) GetTransactionsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetTransactions.RLock()
	calls = mock.calls.GetTransactions
	mock.lockGetTransactions.RUnlock()
	return calls
}

// Ip calls IpFunc.
func (mock *NeighborMock) Ip() string {
	if mock.IpFunc == nil {
		panic("NeighborMock.IpFunc: method is nil but Neighbor.Ip was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIp.Lock()
	mock.calls.Ip = append(mock.calls.Ip, callInfo)
	mock.lockIp.Unlock()
	return mock.IpFunc()
}

// IpCalls gets all the calls that were made to Ip.
// Check the length with:
//     len(mockedNeighbor.IpCalls())
func (mock *NeighborMock) IpCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIp.RLock()
	calls = mock.calls.Ip
	mock.lockIp.RUnlock()
	return calls
}

// Mine calls MineFunc.
func (mock *NeighborMock) Mine() error {
	if mock.MineFunc == nil {
		panic("NeighborMock.MineFunc: method is nil but Neighbor.Mine was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMine.Lock()
	mock.calls.Mine = append(mock.calls.Mine, callInfo)
	mock.lockMine.Unlock()
	return mock.MineFunc()
}

// MineCalls gets all the calls that were made to Mine.
// Check the length with:
//     len(mockedNeighbor.MineCalls())
func (mock *NeighborMock) MineCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMine.RLock()
	calls = mock.calls.Mine
	mock.lockMine.RUnlock()
	return calls
}

// Port calls PortFunc.
func (mock *NeighborMock) Port() uint16 {
	if mock.PortFunc == nil {
		panic("NeighborMock.PortFunc: method is nil but Neighbor.Port was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPort.Lock()
	mock.calls.Port = append(mock.calls.Port, callInfo)
	mock.lockPort.Unlock()
	return mock.PortFunc()
}

// PortCalls gets all the calls that were made to Port.
// Check the length with:
//     len(mockedNeighbor.PortCalls())
func (mock *NeighborMock) PortCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPort.RLock()
	calls = mock.calls.Port
	mock.lockPort.RUnlock()
	return calls
}

// SendTargets calls SendTargetsFunc.
func (mock *NeighborMock) SendTargets(request []network.TargetRequest) error {
	if mock.SendTargetsFunc == nil {
		panic("NeighborMock.SendTargetsFunc: method is nil but Neighbor.SendTargets was just called")
	}
	callInfo := struct {
		Request []network.TargetRequest
	}{
		Request: request,
	}
	mock.lockSendTargets.Lock()
	mock.calls.SendTargets = append(mock.calls.SendTargets, callInfo)
	mock.lockSendTargets.Unlock()
	return mock.SendTargetsFunc(request)
}

// SendTargetsCalls gets all the calls that were made to SendTargets.
// Check the length with:
//     len(mockedNeighbor.SendTargetsCalls())
func (mock *NeighborMock) SendTargetsCalls() []struct {
	Request []network.TargetRequest
} {
	var calls []struct {
		Request []network.TargetRequest
	}
	mock.lockSendTargets.RLock()
	calls = mock.calls.SendTargets
	mock.lockSendTargets.RUnlock()
	return calls
}

// StartMining calls StartMiningFunc.
func (mock *NeighborMock) StartMining() error {
	if mock.StartMiningFunc == nil {
		panic("NeighborMock.StartMiningFunc: method is nil but Neighbor.StartMining was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStartMining.Lock()
	mock.calls.StartMining = append(mock.calls.StartMining, callInfo)
	mock.lockStartMining.Unlock()
	return mock.StartMiningFunc()
}

// StartMiningCalls gets all the calls that were made to StartMining.
// Check the length with:
//     len(mockedNeighbor.StartMiningCalls())
func (mock *NeighborMock) StartMiningCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStartMining.RLock()
	calls = mock.calls.StartMining
	mock.lockStartMining.RUnlock()
	return calls
}

// StopMining calls StopMiningFunc.
func (mock *NeighborMock) StopMining() error {
	if mock.StopMiningFunc == nil {
		panic("NeighborMock.StopMiningFunc: method is nil but Neighbor.StopMining was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStopMining.Lock()
	mock.calls.StopMining = append(mock.calls.StopMining, callInfo)
	mock.lockStopMining.Unlock()
	return mock.StopMiningFunc()
}

// StopMiningCalls gets all the calls that were made to StopMining.
// Check the length with:
//     len(mockedNeighbor.StopMiningCalls())
func (mock *NeighborMock) StopMiningCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStopMining.RLock()
	calls = mock.calls.StopMining
	mock.lockStopMining.RUnlock()
	return calls
}

// Target calls TargetFunc.
func (mock *NeighborMock) Target() string {
	if mock.TargetFunc == nil {
		panic("NeighborMock.TargetFunc: method is nil but Neighbor.Target was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTarget.Lock()
	mock.calls.Target = append(mock.calls.Target, callInfo)
	mock.lockTarget.Unlock()
	return mock.TargetFunc()
}

// TargetCalls gets all the calls that were made to Target.
// Check the length with:
//     len(mockedNeighbor.TargetCalls())
func (mock *NeighborMock) TargetCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTarget.RLock()
	calls = mock.calls.Target
	mock.lockTarget.RUnlock()
	return calls
}
