// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package networkmock

import (
	"github.com/my-cloud/ruthenium/src/node/network"
	"net"
	"sync"
	"time"
)

// Ensure, that IpFinderMock does implement IpFinder.
// If this is not the case, regenerate this file with moq.
var _ network.IpFinder = &IpFinderMock{}

// IpFinderMock is a mock implementation of IpFinder.
//
// 	func TestSomethingThatUsesIpFinder(t *testing.T) {
//
// 		// make and configure a mocked IpFinder
// 		mockedIpFinder := &IpFinderMock{
// 			DialTimeoutFunc: func(network string, address string, timeout time.Duration) (net.Conn, error) {
// 				panic("mock out the DialTimeout method")
// 			},
// 			LookupIPFunc: func(ip string) ([]net.IP, error) {
// 				panic("mock out the LookupIP method")
// 			},
// 		}
//
// 		// use mockedIpFinder in code that requires IpFinder
// 		// and then make assertions.
//
// 	}
type IpFinderMock struct {
	// DialTimeoutFunc mocks the DialTimeout method.
	DialTimeoutFunc func(network string, address string, timeout time.Duration) (net.Conn, error)

	// LookupIPFunc mocks the LookupIP method.
	LookupIPFunc func(ip string) ([]net.IP, error)

	// calls tracks calls to the methods.
	calls struct {
		// DialTimeout holds details about calls to the DialTimeout method.
		DialTimeout []struct {
			// Network is the network argument value.
			Network string
			// Address is the address argument value.
			Address string
			// Timeout is the timeout argument value.
			Timeout time.Duration
		}
		// LookupIP holds details about calls to the LookupIP method.
		LookupIP []struct {
			// IP is the ip argument value.
			IP string
		}
	}
	lockDialTimeout sync.RWMutex
	lockLookupIP    sync.RWMutex
}

// DialTimeout calls DialTimeoutFunc.
func (mock *IpFinderMock) DialTimeout(network string, address string, timeout time.Duration) (net.Conn, error) {
	if mock.DialTimeoutFunc == nil {
		panic("IpFinderMock.DialTimeoutFunc: method is nil but IpFinder.DialTimeout was just called")
	}
	callInfo := struct {
		Network string
		Address string
		Timeout time.Duration
	}{
		Network: network,
		Address: address,
		Timeout: timeout,
	}
	mock.lockDialTimeout.Lock()
	mock.calls.DialTimeout = append(mock.calls.DialTimeout, callInfo)
	mock.lockDialTimeout.Unlock()
	return mock.DialTimeoutFunc(network, address, timeout)
}

// DialTimeoutCalls gets all the calls that were made to DialTimeout.
// Check the length with:
//     len(mockedIpFinder.DialTimeoutCalls())
func (mock *IpFinderMock) DialTimeoutCalls() []struct {
	Network string
	Address string
	Timeout time.Duration
} {
	var calls []struct {
		Network string
		Address string
		Timeout time.Duration
	}
	mock.lockDialTimeout.RLock()
	calls = mock.calls.DialTimeout
	mock.lockDialTimeout.RUnlock()
	return calls
}

// LookupIP calls LookupIPFunc.
func (mock *IpFinderMock) LookupIP(ip string) ([]net.IP, error) {
	if mock.LookupIPFunc == nil {
		panic("IpFinderMock.LookupIPFunc: method is nil but IpFinder.LookupIP was just called")
	}
	callInfo := struct {
		IP string
	}{
		IP: ip,
	}
	mock.lockLookupIP.Lock()
	mock.calls.LookupIP = append(mock.calls.LookupIP, callInfo)
	mock.lockLookupIP.Unlock()
	return mock.LookupIPFunc(ip)
}

// LookupIPCalls gets all the calls that were made to LookupIP.
// Check the length with:
//     len(mockedIpFinder.LookupIPCalls())
func (mock *IpFinderMock) LookupIPCalls() []struct {
	IP string
} {
	var calls []struct {
		IP string
	}
	mock.lockLookupIP.RLock()
	calls = mock.calls.LookupIP
	mock.lockLookupIP.RUnlock()
	return calls
}
