// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package network

import (
	"github.com/my-cloud/ruthenium/src/protocol"
	"sync"
)

// Ensure, that ValidatorMock does implement Validator.
// If this is not the case, regenerate this file with moq.
var _ protocol.Validator = &ValidatorMock{}

// ValidatorMock is a mock implementation of Validator.
//
// 	func TestSomethingThatUsesValidator(t *testing.T) {
//
// 		// make and configure a mocked Validator
// 		mockedValidator := &ValidatorMock{
// 			StartValidationFunc: func()  {
// 				panic("mock out the Start method")
// 			},
// 			StopValidationFunc: func()  {
// 				panic("mock out the Stop method")
// 			},
// 			ValidateFunc: func()  {
// 				panic("mock out the Do method")
// 			},
// 		}
//
// 		// use mockedValidator in code that requires Validator
// 		// and then make assertions.
//
// 	}
type ValidatorMock struct {
	// StartValidationFunc mocks the Start method.
	StartValidationFunc func()

	// StopValidationFunc mocks the Stop method.
	StopValidationFunc func()

	// ValidateFunc mocks the Do method.
	ValidateFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Start holds details about calls to the Start method.
		StartValidation []struct {
		}
		// Stop holds details about calls to the Stop method.
		StopValidation []struct {
		}
		// Do holds details about calls to the Do method.
		Validate []struct {
		}
	}
	lockStartValidation sync.RWMutex
	lockStopValidation  sync.RWMutex
	lockValidate        sync.RWMutex
}

// Start calls StartValidationFunc.
func (mock *ValidatorMock) Start() {
	if mock.StartValidationFunc == nil {
		panic("ValidatorMock.StartValidationFunc: method is nil but Validator.Start was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStartValidation.Lock()
	mock.calls.StartValidation = append(mock.calls.StartValidation, callInfo)
	mock.lockStartValidation.Unlock()
	mock.StartValidationFunc()
}

// StartValidationCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedValidator.StartValidationCalls())
func (mock *ValidatorMock) StartValidationCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStartValidation.RLock()
	calls = mock.calls.StartValidation
	mock.lockStartValidation.RUnlock()
	return calls
}

// Stop calls StopValidationFunc.
func (mock *ValidatorMock) Stop() {
	if mock.StopValidationFunc == nil {
		panic("ValidatorMock.StopValidationFunc: method is nil but Validator.Stop was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStopValidation.Lock()
	mock.calls.StopValidation = append(mock.calls.StopValidation, callInfo)
	mock.lockStopValidation.Unlock()
	mock.StopValidationFunc()
}

// StopValidationCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedValidator.StopValidationCalls())
func (mock *ValidatorMock) StopValidationCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStopValidation.RLock()
	calls = mock.calls.StopValidation
	mock.lockStopValidation.RUnlock()
	return calls
}

// Do calls ValidateFunc.
func (mock *ValidatorMock) Do() {
	if mock.ValidateFunc == nil {
		panic("ValidatorMock.ValidateFunc: method is nil but Validator.Do was just called")
	}
	callInfo := struct {
	}{}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	mock.ValidateFunc()
}

// ValidateCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedValidator.ValidateCalls())
func (mock *ValidatorMock) ValidateCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}
