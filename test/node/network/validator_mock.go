// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package network

import (
	"github.com/my-cloud/ruthenium/src/api/node/protocol"
	"sync"
)

// Ensure, that ValidatorMock does implement Validator.
// If this is not the case, regenerate this file with moq.
var _ protocol.Validator = &ValidatorMock{}

// ValidatorMock is a mock implementation of Validator.
//
// 	func TestSomethingThatUsesValidator(t *testing.T) {
//
// 		// make and configure a mocked Validator
// 		mockedValidator := &ValidatorMock{
// 			DoFunc: func()  {
// 				panic("mock out the Do method")
// 			},
// 			StartFunc: func()  {
// 				panic("mock out the Start method")
// 			},
// 			StopFunc: func()  {
// 				panic("mock out the Stop method")
// 			},
// 		}
//
// 		// use mockedValidator in code that requires Validator
// 		// and then make assertions.
//
// 	}
type ValidatorMock struct {
	// DoFunc mocks the Do method.
	DoFunc func()

	// StartFunc mocks the Start method.
	StartFunc func()

	// StopFunc mocks the Stop method.
	StopFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
	lockDo    sync.RWMutex
	lockStart sync.RWMutex
	lockStop  sync.RWMutex
}

// Do calls DoFunc.
func (mock *ValidatorMock) Do() {
	if mock.DoFunc == nil {
		panic("ValidatorMock.DoFunc: method is nil but Validator.Do was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	mock.DoFunc()
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedValidator.DoCalls())
func (mock *ValidatorMock) DoCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *ValidatorMock) Start() {
	if mock.StartFunc == nil {
		panic("ValidatorMock.StartFunc: method is nil but Validator.Start was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	mock.StartFunc()
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedValidator.StartCalls())
func (mock *ValidatorMock) StartCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *ValidatorMock) Stop() {
	if mock.StopFunc == nil {
		panic("ValidatorMock.StopFunc: method is nil but Validator.Stop was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	mock.lockStop.Unlock()
	mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedValidator.StopCalls())
func (mock *ValidatorMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStop.RLock()
	calls = mock.calls.Stop
	mock.lockStop.RUnlock()
	return calls
}
