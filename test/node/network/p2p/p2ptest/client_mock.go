// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package p2ptest

import (
	gp2p "github.com/leprosus/golang-p2p"
	"github.com/my-cloud/ruthenium/src/node/network/p2p"
	"sync"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ p2p.Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked Client
//		mockedClient := &ClientMock{
//			SendFunc: func(topic string, req gp2p.Data) (gp2p.Data, error) {
//				panic("mock out the Send method")
//			},
//			SetSettingsFunc: func(stg *gp2p.ClientSettings)  {
//				panic("mock out the SetSettings method")
//			},
//		}
//
//		// use mockedClient in code that requires Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// SendFunc mocks the Send method.
	SendFunc func(topic string, req gp2p.Data) (gp2p.Data, error)

	// SetSettingsFunc mocks the SetSettings method.
	SetSettingsFunc func(stg *gp2p.ClientSettings)

	// calls tracks calls to the methods.
	calls struct {
		// Send holds details about calls to the Send method.
		Send []struct {
			// Topic is the topic argument value.
			Topic string
			// Req is the req argument value.
			Req gp2p.Data
		}
		// SetSettings holds details about calls to the SetSettings method.
		SetSettings []struct {
			// Stg is the stg argument value.
			Stg *gp2p.ClientSettings
		}
	}
	lockSend        sync.RWMutex
	lockSetSettings sync.RWMutex
}

// Send calls SendFunc.
func (mock *ClientMock) Send(topic string, req gp2p.Data) (gp2p.Data, error) {
	if mock.SendFunc == nil {
		panic("ClientMock.SendFunc: method is nil but Client.Send was just called")
	}
	callInfo := struct {
		Topic string
		Req   gp2p.Data
	}{
		Topic: topic,
		Req:   req,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(topic, req)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//
//	len(mockedClient.SendCalls())
func (mock *ClientMock) SendCalls() []struct {
	Topic string
	Req   gp2p.Data
} {
	var calls []struct {
		Topic string
		Req   gp2p.Data
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}

// SetSettings calls SetSettingsFunc.
func (mock *ClientMock) SetSettings(stg *gp2p.ClientSettings) {
	if mock.SetSettingsFunc == nil {
		panic("ClientMock.SetSettingsFunc: method is nil but Client.SetSettings was just called")
	}
	callInfo := struct {
		Stg *gp2p.ClientSettings
	}{
		Stg: stg,
	}
	mock.lockSetSettings.Lock()
	mock.calls.SetSettings = append(mock.calls.SetSettings, callInfo)
	mock.lockSetSettings.Unlock()
	mock.SetSettingsFunc(stg)
}

// SetSettingsCalls gets all the calls that were made to SetSettings.
// Check the length with:
//
//	len(mockedClient.SetSettingsCalls())
func (mock *ClientMock) SetSettingsCalls() []struct {
	Stg *gp2p.ClientSettings
} {
	var calls []struct {
		Stg *gp2p.ClientSettings
	}
	mock.lockSetSettings.RLock()
	calls = mock.calls.SetSettings
	mock.lockSetSettings.RUnlock()
	return calls
}
