// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package p2ptest

import (
	"github.com/my-cloud/ruthenium/src/node/network/p2p"
	"sync"
	"time"
)

// Ensure, that SettingsMock does implement Settings.
// If this is not the case, regenerate this file with moq.
var _ p2p.Settings = &SettingsMock{}

// SettingsMock is a mock implementation of Settings.
//
//	func TestSomethingThatUsesSettings(t *testing.T) {
//
//		// make and configure a mocked Settings
//		mockedSettings := &SettingsMock{
//			ValidationTimeoutFunc: func() time.Duration {
//				panic("mock out the ValidationTimeout method")
//			},
//		}
//
//		// use mockedSettings in code that requires Settings
//		// and then make assertions.
//
//	}
type SettingsMock struct {
	// ValidationTimeoutFunc mocks the ValidationTimeout method.
	ValidationTimeoutFunc func() time.Duration

	// calls tracks calls to the methods.
	calls struct {
		// ValidationTimeout holds details about calls to the ValidationTimeout method.
		ValidationTimeout []struct {
		}
	}
	lockValidationTimeout sync.RWMutex
}

// ValidationTimeout calls ValidationTimeoutFunc.
func (mock *SettingsMock) ValidationTimeout() time.Duration {
	if mock.ValidationTimeoutFunc == nil {
		panic("SettingsMock.ValidationTimeoutFunc: method is nil but Settings.ValidationTimeout was just called")
	}
	callInfo := struct {
	}{}
	mock.lockValidationTimeout.Lock()
	mock.calls.ValidationTimeout = append(mock.calls.ValidationTimeout, callInfo)
	mock.lockValidationTimeout.Unlock()
	return mock.ValidationTimeoutFunc()
}

// ValidationTimeoutCalls gets all the calls that were made to ValidationTimeout.
// Check the length with:
//
//	len(mockedSettings.ValidationTimeoutCalls())
func (mock *SettingsMock) ValidationTimeoutCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockValidationTimeout.RLock()
	calls = mock.calls.ValidationTimeout
	mock.lockValidationTimeout.RUnlock()
	return calls
}
