// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package networktest

import (
	"github.com/my-cloud/ruthenium/src/node/network"
	"sync"
)

// Ensure, that NeighborMock does implement Neighbor.
// If this is not the case, regenerate this file with moq.
var _ network.Neighbor = &NeighborMock{}

// NeighborMock is a mock implementation of Neighbor.
//
//	func TestSomethingThatUsesNeighbor(t *testing.T) {
//
//		// make and configure a mocked Neighbor
//		mockedNeighbor := &NeighborMock{
//			AddTransactionFunc: func(request TransactionRequest) error {
//				panic("mock out the AddTransaction method")
//			},
//			GetAmountFunc: func(request AmountRequest) (*AmountResponse, error) {
//				panic("mock out the GetAmount method")
//			},
//			GetBlocksFunc: func() ([]*BlockResponse, error) {
//				panic("mock out the GetBlocks method")
//			},
//			GetLastBlocksFunc: func(lastBlocksRequest LastBlocksRequest) ([]*BlockResponse, error) {
//				panic("mock out the GetLastBlocks method")
//			},
//			GetTransactionsFunc: func() ([]TransactionResponse, error) {
//				panic("mock out the GetTransactions method")
//			},
//			IpFunc: func() string {
//				panic("mock out the Ip method")
//			},
//			PortFunc: func() uint16 {
//				panic("mock out the Port method")
//			},
//			SendTargetsFunc: func(request []TargetRequest) error {
//				panic("mock out the SendTargets method")
//			},
//			StartValidationFunc: func() error {
//				panic("mock out the StartValidation method")
//			},
//			StopValidationFunc: func() error {
//				panic("mock out the StopValidation method")
//			},
//			TargetFunc: func() string {
//				panic("mock out the Target method")
//			},
//		}
//
//		// use mockedNeighbor in code that requires Neighbor
//		// and then make assertions.
//
//	}
type NeighborMock struct {
	// AddTransactionFunc mocks the AddTransaction method.
	AddTransactionFunc func(request network.TransactionRequest) error

	// GetAmountFunc mocks the GetAmount method.
	GetAmountFunc func(request network.AmountRequest) (*network.AmountResponse, error)

	// GetBlocksFunc mocks the GetBlocks method.
	GetBlocksFunc func() ([]*network.BlockResponse, error)

	// GetLastBlocksFunc mocks the GetLastBlocks method.
	GetLastBlocksFunc func(lastBlocksRequest network.LastBlocksRequest) ([]*network.BlockResponse, error)

	// GetTransactionsFunc mocks the GetTransactions method.
	GetTransactionsFunc func() ([]network.TransactionResponse, error)

	// IpFunc mocks the Ip method.
	IpFunc func() string

	// PortFunc mocks the Port method.
	PortFunc func() uint16

	// SendTargetsFunc mocks the SendTargets method.
	SendTargetsFunc func(request []network.TargetRequest) error

	// StartValidationFunc mocks the StartValidation method.
	StartValidationFunc func() error

	// StopValidationFunc mocks the StopValidation method.
	StopValidationFunc func() error

	// TargetFunc mocks the Target method.
	TargetFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// AddTransaction holds details about calls to the AddTransaction method.
		AddTransaction []struct {
			// Request is the request argument value.
			Request network.TransactionRequest
		}
		// GetAmount holds details about calls to the GetAmount method.
		GetAmount []struct {
			// Request is the request argument value.
			Request network.AmountRequest
		}
		// GetBlocks holds details about calls to the GetBlocks method.
		GetBlocks []struct {
		}
		// GetLastBlocks holds details about calls to the GetLastBlocks method.
		GetLastBlocks []struct {
			// LastBlocksRequest is the lastBlocksRequest argument value.
			LastBlocksRequest network.LastBlocksRequest
		}
		// GetTransactions holds details about calls to the GetTransactions method.
		GetTransactions []struct {
		}
		// Ip holds details about calls to the Ip method.
		Ip []struct {
		}
		// Port holds details about calls to the Port method.
		Port []struct {
		}
		// SendTargets holds details about calls to the SendTargets method.
		SendTargets []struct {
			// Request is the request argument value.
			Request []network.TargetRequest
		}
		// StartValidation holds details about calls to the StartValidation method.
		StartValidation []struct {
		}
		// StopValidation holds details about calls to the StopValidation method.
		StopValidation []struct {
		}
		// Target holds details about calls to the Target method.
		Target []struct {
		}
	}
	lockAddTransaction  sync.RWMutex
	lockGetAmount       sync.RWMutex
	lockGetBlocks       sync.RWMutex
	lockGetLastBlocks   sync.RWMutex
	lockGetTransactions sync.RWMutex
	lockIp              sync.RWMutex
	lockPort            sync.RWMutex
	lockSendTargets     sync.RWMutex
	lockStartValidation sync.RWMutex
	lockStopValidation  sync.RWMutex
	lockTarget          sync.RWMutex
}

// AddTransaction calls AddTransactionFunc.
func (mock *NeighborMock) AddTransaction(request network.TransactionRequest) error {
	if mock.AddTransactionFunc == nil {
		panic("NeighborMock.AddTransactionFunc: method is nil but Neighbor.AddTransaction was just called")
	}
	callInfo := struct {
		Request network.TransactionRequest
	}{
		Request: request,
	}
	mock.lockAddTransaction.Lock()
	mock.calls.AddTransaction = append(mock.calls.AddTransaction, callInfo)
	mock.lockAddTransaction.Unlock()
	return mock.AddTransactionFunc(request)
}

// AddTransactionCalls gets all the calls that were made to AddTransaction.
// Check the length with:
//
//	len(mockedNeighbor.AddTransactionCalls())
func (mock *NeighborMock) AddTransactionCalls() []struct {
	Request network.TransactionRequest
} {
	var calls []struct {
		Request network.TransactionRequest
	}
	mock.lockAddTransaction.RLock()
	calls = mock.calls.AddTransaction
	mock.lockAddTransaction.RUnlock()
	return calls
}

// GetAmount calls GetAmountFunc.
func (mock *NeighborMock) GetAmount(request network.AmountRequest) (*network.AmountResponse, error) {
	if mock.GetAmountFunc == nil {
		panic("NeighborMock.GetAmountFunc: method is nil but Neighbor.GetAmount was just called")
	}
	callInfo := struct {
		Request network.AmountRequest
	}{
		Request: request,
	}
	mock.lockGetAmount.Lock()
	mock.calls.GetAmount = append(mock.calls.GetAmount, callInfo)
	mock.lockGetAmount.Unlock()
	return mock.GetAmountFunc(request)
}

// GetAmountCalls gets all the calls that were made to GetAmount.
// Check the length with:
//
//	len(mockedNeighbor.GetAmountCalls())
func (mock *NeighborMock) GetAmountCalls() []struct {
	Request network.AmountRequest
} {
	var calls []struct {
		Request network.AmountRequest
	}
	mock.lockGetAmount.RLock()
	calls = mock.calls.GetAmount
	mock.lockGetAmount.RUnlock()
	return calls
}

// GetBlocks calls GetBlocksFunc.
func (mock *NeighborMock) GetBlocks() ([]*network.BlockResponse, error) {
	if mock.GetBlocksFunc == nil {
		panic("NeighborMock.GetBlocksFunc: method is nil but Neighbor.GetBlocks was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetBlocks.Lock()
	mock.calls.GetBlocks = append(mock.calls.GetBlocks, callInfo)
	mock.lockGetBlocks.Unlock()
	return mock.GetBlocksFunc()
}

// GetBlocksCalls gets all the calls that were made to GetBlocks.
// Check the length with:
//
//	len(mockedNeighbor.GetBlocksCalls())
func (mock *NeighborMock) GetBlocksCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetBlocks.RLock()
	calls = mock.calls.GetBlocks
	mock.lockGetBlocks.RUnlock()
	return calls
}

// GetLastBlocks calls GetLastBlocksFunc.
func (mock *NeighborMock) GetLastBlocks(lastBlocksRequest network.LastBlocksRequest) ([]*network.BlockResponse, error) {
	if mock.GetLastBlocksFunc == nil {
		panic("NeighborMock.GetLastBlocksFunc: method is nil but Neighbor.GetLastBlocks was just called")
	}
	callInfo := struct {
		LastBlocksRequest network.LastBlocksRequest
	}{
		LastBlocksRequest: lastBlocksRequest,
	}
	mock.lockGetLastBlocks.Lock()
	mock.calls.GetLastBlocks = append(mock.calls.GetLastBlocks, callInfo)
	mock.lockGetLastBlocks.Unlock()
	return mock.GetLastBlocksFunc(lastBlocksRequest)
}

// GetLastBlocksCalls gets all the calls that were made to GetLastBlocks.
// Check the length with:
//
//	len(mockedNeighbor.GetLastBlocksCalls())
func (mock *NeighborMock) GetLastBlocksCalls() []struct {
	LastBlocksRequest network.LastBlocksRequest
} {
	var calls []struct {
		LastBlocksRequest network.LastBlocksRequest
	}
	mock.lockGetLastBlocks.RLock()
	calls = mock.calls.GetLastBlocks
	mock.lockGetLastBlocks.RUnlock()
	return calls
}

// GetTransactions calls GetTransactionsFunc.
func (mock *NeighborMock) GetTransactions() ([]network.TransactionResponse, error) {
	if mock.GetTransactionsFunc == nil {
		panic("NeighborMock.GetTransactionsFunc: method is nil but Neighbor.GetTransactions was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetTransactions.Lock()
	mock.calls.GetTransactions = append(mock.calls.GetTransactions, callInfo)
	mock.lockGetTransactions.Unlock()
	return mock.GetTransactionsFunc()
}

// GetTransactionsCalls gets all the calls that were made to GetTransactions.
// Check the length with:
//
//	len(mockedNeighbor.GetTransactionsCalls())
func (mock *NeighborMock) GetTransactionsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetTransactions.RLock()
	calls = mock.calls.GetTransactions
	mock.lockGetTransactions.RUnlock()
	return calls
}

// Ip calls IpFunc.
func (mock *NeighborMock) Ip() string {
	if mock.IpFunc == nil {
		panic("NeighborMock.IpFunc: method is nil but Neighbor.Ip was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIp.Lock()
	mock.calls.Ip = append(mock.calls.Ip, callInfo)
	mock.lockIp.Unlock()
	return mock.IpFunc()
}

// IpCalls gets all the calls that were made to Ip.
// Check the length with:
//
//	len(mockedNeighbor.IpCalls())
func (mock *NeighborMock) IpCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIp.RLock()
	calls = mock.calls.Ip
	mock.lockIp.RUnlock()
	return calls
}

// Port calls PortFunc.
func (mock *NeighborMock) Port() uint16 {
	if mock.PortFunc == nil {
		panic("NeighborMock.PortFunc: method is nil but Neighbor.Port was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPort.Lock()
	mock.calls.Port = append(mock.calls.Port, callInfo)
	mock.lockPort.Unlock()
	return mock.PortFunc()
}

// PortCalls gets all the calls that were made to Port.
// Check the length with:
//
//	len(mockedNeighbor.PortCalls())
func (mock *NeighborMock) PortCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPort.RLock()
	calls = mock.calls.Port
	mock.lockPort.RUnlock()
	return calls
}

// SendTargets calls SendTargetsFunc.
func (mock *NeighborMock) SendTargets(request []network.TargetRequest) error {
	if mock.SendTargetsFunc == nil {
		panic("NeighborMock.SendTargetsFunc: method is nil but Neighbor.SendTargets was just called")
	}
	callInfo := struct {
		Request []network.TargetRequest
	}{
		Request: request,
	}
	mock.lockSendTargets.Lock()
	mock.calls.SendTargets = append(mock.calls.SendTargets, callInfo)
	mock.lockSendTargets.Unlock()
	return mock.SendTargetsFunc(request)
}

// SendTargetsCalls gets all the calls that were made to SendTargets.
// Check the length with:
//
//	len(mockedNeighbor.SendTargetsCalls())
func (mock *NeighborMock) SendTargetsCalls() []struct {
	Request []network.TargetRequest
} {
	var calls []struct {
		Request []network.TargetRequest
	}
	mock.lockSendTargets.RLock()
	calls = mock.calls.SendTargets
	mock.lockSendTargets.RUnlock()
	return calls
}

// StartValidation calls StartValidationFunc.
func (mock *NeighborMock) StartValidation() error {
	if mock.StartValidationFunc == nil {
		panic("NeighborMock.StartValidationFunc: method is nil but Neighbor.StartValidation was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStartValidation.Lock()
	mock.calls.StartValidation = append(mock.calls.StartValidation, callInfo)
	mock.lockStartValidation.Unlock()
	return mock.StartValidationFunc()
}

// StartValidationCalls gets all the calls that were made to StartValidation.
// Check the length with:
//
//	len(mockedNeighbor.StartValidationCalls())
func (mock *NeighborMock) StartValidationCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStartValidation.RLock()
	calls = mock.calls.StartValidation
	mock.lockStartValidation.RUnlock()
	return calls
}

// StopValidation calls StopValidationFunc.
func (mock *NeighborMock) StopValidation() error {
	if mock.StopValidationFunc == nil {
		panic("NeighborMock.StopValidationFunc: method is nil but Neighbor.StopValidation was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStopValidation.Lock()
	mock.calls.StopValidation = append(mock.calls.StopValidation, callInfo)
	mock.lockStopValidation.Unlock()
	return mock.StopValidationFunc()
}

// StopValidationCalls gets all the calls that were made to StopValidation.
// Check the length with:
//
//	len(mockedNeighbor.StopValidationCalls())
func (mock *NeighborMock) StopValidationCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStopValidation.RLock()
	calls = mock.calls.StopValidation
	mock.lockStopValidation.RUnlock()
	return calls
}

// Target calls TargetFunc.
func (mock *NeighborMock) Target() string {
	if mock.TargetFunc == nil {
		panic("NeighborMock.TargetFunc: method is nil but Neighbor.Target was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTarget.Lock()
	mock.calls.Target = append(mock.calls.Target, callInfo)
	mock.lockTarget.Unlock()
	return mock.TargetFunc()
}

// TargetCalls gets all the calls that were made to Target.
// Check the length with:
//
//	len(mockedNeighbor.TargetCalls())
func (mock *NeighborMock) TargetCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTarget.RLock()
	calls = mock.calls.Target
	mock.lockTarget.RUnlock()
	return calls
}
