// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package networktest

import (
	"github.com/my-cloud/ruthenium/src/node/network"
	"sync"
)

// Ensure, that NeighborMock does implement Neighbor.
// If this is not the case, regenerate this file with moq.
var _ network.Neighbor = &NeighborMock{}

// NeighborMock is a mock implementation of Neighbor.
//
//	func TestSomethingThatUsesNeighbor(t *testing.T) {
//
//		// make and configure a mocked Neighbor
//		mockedNeighbor := &NeighborMock{
//			AddTransactionFunc: func(request TransactionRequest) error {
//				panic("mock out the AddTransaction method")
//			},
//			GetBlockFunc: func(blockHeight uint64) (*BlockResponse, error) {
//				panic("mock out the GetBlock method")
//			},
//			GetBlocksFunc: func() ([]*BlockResponse, error) {
//				panic("mock out the GetBlocks method")
//			},
//			GetLambdaFunc: func() (float64, error) {
//				panic("mock out the GetLambda method")
//			},
//			GetLastBlocksFunc: func(startingBlockHeight uint64) ([]*BlockResponse, error) {
//				panic("mock out the GetLastBlocks method")
//			},
//			GetTransactionsFunc: func() ([]TransactionResponse, error) {
//				panic("mock out the GetTransactions method")
//			},
//			GetUtxosFunc: func(address string) ([]*UtxoResponse, error) {
//				panic("mock out the GetUtxos method")
//			},
//			SendTargetsFunc: func(request []TargetRequest) error {
//				panic("mock out the SendTargets method")
//			},
//			TargetFunc: func() string {
//				panic("mock out the Target method")
//			},
//		}
//
//		// use mockedNeighbor in code that requires Neighbor
//		// and then make assertions.
//
//	}
type NeighborMock struct {
	// AddTransactionFunc mocks the AddTransaction method.
	AddTransactionFunc func(request network.TransactionRequest) error

	// GetBlockFunc mocks the GetBlock method.
	GetBlockFunc func(blockHeight uint64) (*network.BlockResponse, error)

	// GetBlocksFunc mocks the GetBlocks method.
	GetBlocksFunc func() ([]*network.BlockResponse, error)

	// GetLambdaFunc mocks the GetLambda method.
	GetLambdaFunc func() (float64, error)

	// GetLastBlocksFunc mocks the GetLastBlocks method.
	GetLastBlocksFunc func(startingBlockHeight uint64) ([]*network.BlockResponse, error)

	// GetTransactionsFunc mocks the GetTransactions method.
	GetTransactionsFunc func() ([]network.TransactionResponse, error)

	// GetUtxosFunc mocks the GetUtxos method.
	GetUtxosFunc func(address string) ([]*network.UtxoResponse, error)

	// SendTargetsFunc mocks the SendTargets method.
	SendTargetsFunc func(request []network.TargetRequest) error

	// TargetFunc mocks the Target method.
	TargetFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// AddTransaction holds details about calls to the AddTransaction method.
		AddTransaction []struct {
			// Request is the request argument value.
			Request network.TransactionRequest
		}
		// GetBlock holds details about calls to the GetBlock method.
		GetBlock []struct {
			// BlockHeight is the blockHeight argument value.
			BlockHeight uint64
		}
		// GetBlocks holds details about calls to the GetBlocks method.
		GetBlocks []struct {
		}
		// GetLambda holds details about calls to the GetLambda method.
		GetLambda []struct {
		}
		// GetLastBlocks holds details about calls to the GetLastBlocks method.
		GetLastBlocks []struct {
			// StartingBlockHeight is the startingBlockHeight argument value.
			StartingBlockHeight uint64
		}
		// GetTransactions holds details about calls to the GetTransactions method.
		GetTransactions []struct {
		}
		// GetUtxos holds details about calls to the GetUtxos method.
		GetUtxos []struct {
			// Address is the address argument value.
			Address string
		}
		// SendTargets holds details about calls to the SendTargets method.
		SendTargets []struct {
			// Request is the request argument value.
			Request []network.TargetRequest
		}
		// Target holds details about calls to the Target method.
		Target []struct {
		}
	}
	lockAddTransaction  sync.RWMutex
	lockGetBlock        sync.RWMutex
	lockGetBlocks       sync.RWMutex
	lockGetLambda       sync.RWMutex
	lockGetLastBlocks   sync.RWMutex
	lockGetTransactions sync.RWMutex
	lockGetUtxos        sync.RWMutex
	lockSendTargets     sync.RWMutex
	lockTarget          sync.RWMutex
}

// AddTransaction calls AddTransactionFunc.
func (mock *NeighborMock) AddTransaction(request network.TransactionRequest) error {
	if mock.AddTransactionFunc == nil {
		panic("NeighborMock.AddTransactionFunc: method is nil but Neighbor.AddTransaction was just called")
	}
	callInfo := struct {
		Request network.TransactionRequest
	}{
		Request: request,
	}
	mock.lockAddTransaction.Lock()
	mock.calls.AddTransaction = append(mock.calls.AddTransaction, callInfo)
	mock.lockAddTransaction.Unlock()
	return mock.AddTransactionFunc(request)
}

// AddTransactionCalls gets all the calls that were made to AddTransaction.
// Check the length with:
//
//	len(mockedNeighbor.AddTransactionCalls())
func (mock *NeighborMock) AddTransactionCalls() []struct {
	Request network.TransactionRequest
} {
	var calls []struct {
		Request network.TransactionRequest
	}
	mock.lockAddTransaction.RLock()
	calls = mock.calls.AddTransaction
	mock.lockAddTransaction.RUnlock()
	return calls
}

// GetBlock calls GetBlockFunc.
func (mock *NeighborMock) GetBlock(blockHeight uint64) (*network.BlockResponse, error) {
	if mock.GetBlockFunc == nil {
		panic("NeighborMock.GetBlockFunc: method is nil but Neighbor.GetBlock was just called")
	}
	callInfo := struct {
		BlockHeight uint64
	}{
		BlockHeight: blockHeight,
	}
	mock.lockGetBlock.Lock()
	mock.calls.GetBlock = append(mock.calls.GetBlock, callInfo)
	mock.lockGetBlock.Unlock()
	return mock.GetBlockFunc(blockHeight)
}

// GetBlockCalls gets all the calls that were made to GetBlock.
// Check the length with:
//
//	len(mockedNeighbor.GetBlockCalls())
func (mock *NeighborMock) GetBlockCalls() []struct {
	BlockHeight uint64
} {
	var calls []struct {
		BlockHeight uint64
	}
	mock.lockGetBlock.RLock()
	calls = mock.calls.GetBlock
	mock.lockGetBlock.RUnlock()
	return calls
}

// GetBlocks calls GetBlocksFunc.
func (mock *NeighborMock) GetBlocks() ([]*network.BlockResponse, error) {
	if mock.GetBlocksFunc == nil {
		panic("NeighborMock.GetBlocksFunc: method is nil but Neighbor.GetBlocks was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetBlocks.Lock()
	mock.calls.GetBlocks = append(mock.calls.GetBlocks, callInfo)
	mock.lockGetBlocks.Unlock()
	return mock.GetBlocksFunc()
}

// GetBlocksCalls gets all the calls that were made to GetBlocks.
// Check the length with:
//
//	len(mockedNeighbor.GetBlocksCalls())
func (mock *NeighborMock) GetBlocksCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetBlocks.RLock()
	calls = mock.calls.GetBlocks
	mock.lockGetBlocks.RUnlock()
	return calls
}

// GetLambda calls GetLambdaFunc.
func (mock *NeighborMock) GetLambda() (float64, error) {
	if mock.GetLambdaFunc == nil {
		panic("NeighborMock.GetLambdaFunc: method is nil but Neighbor.GetLambda was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetLambda.Lock()
	mock.calls.GetLambda = append(mock.calls.GetLambda, callInfo)
	mock.lockGetLambda.Unlock()
	return mock.GetLambdaFunc()
}

// GetLambdaCalls gets all the calls that were made to GetLambda.
// Check the length with:
//
//	len(mockedNeighbor.GetLambdaCalls())
func (mock *NeighborMock) GetLambdaCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetLambda.RLock()
	calls = mock.calls.GetLambda
	mock.lockGetLambda.RUnlock()
	return calls
}

// GetLastBlocks calls GetLastBlocksFunc.
func (mock *NeighborMock) GetLastBlocks(startingBlockHeight uint64) ([]*network.BlockResponse, error) {
	if mock.GetLastBlocksFunc == nil {
		panic("NeighborMock.GetLastBlocksFunc: method is nil but Neighbor.GetLastBlocks was just called")
	}
	callInfo := struct {
		StartingBlockHeight uint64
	}{
		StartingBlockHeight: startingBlockHeight,
	}
	mock.lockGetLastBlocks.Lock()
	mock.calls.GetLastBlocks = append(mock.calls.GetLastBlocks, callInfo)
	mock.lockGetLastBlocks.Unlock()
	return mock.GetLastBlocksFunc(startingBlockHeight)
}

// GetLastBlocksCalls gets all the calls that were made to GetLastBlocks.
// Check the length with:
//
//	len(mockedNeighbor.GetLastBlocksCalls())
func (mock *NeighborMock) GetLastBlocksCalls() []struct {
	StartingBlockHeight uint64
} {
	var calls []struct {
		StartingBlockHeight uint64
	}
	mock.lockGetLastBlocks.RLock()
	calls = mock.calls.GetLastBlocks
	mock.lockGetLastBlocks.RUnlock()
	return calls
}

// GetTransactions calls GetTransactionsFunc.
func (mock *NeighborMock) GetTransactions() ([]network.TransactionResponse, error) {
	if mock.GetTransactionsFunc == nil {
		panic("NeighborMock.GetTransactionsFunc: method is nil but Neighbor.GetTransactions was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetTransactions.Lock()
	mock.calls.GetTransactions = append(mock.calls.GetTransactions, callInfo)
	mock.lockGetTransactions.Unlock()
	return mock.GetTransactionsFunc()
}

// GetTransactionsCalls gets all the calls that were made to GetTransactions.
// Check the length with:
//
//	len(mockedNeighbor.GetTransactionsCalls())
func (mock *NeighborMock) GetTransactionsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetTransactions.RLock()
	calls = mock.calls.GetTransactions
	mock.lockGetTransactions.RUnlock()
	return calls
}

// GetUtxos calls GetUtxosFunc.
func (mock *NeighborMock) GetUtxos(address string) ([]*network.UtxoResponse, error) {
	if mock.GetUtxosFunc == nil {
		panic("NeighborMock.GetUtxosFunc: method is nil but Neighbor.GetUtxos was just called")
	}
	callInfo := struct {
		Address string
	}{
		Address: address,
	}
	mock.lockGetUtxos.Lock()
	mock.calls.GetUtxos = append(mock.calls.GetUtxos, callInfo)
	mock.lockGetUtxos.Unlock()
	return mock.GetUtxosFunc(address)
}

// GetUtxosCalls gets all the calls that were made to GetUtxos.
// Check the length with:
//
//	len(mockedNeighbor.GetUtxosCalls())
func (mock *NeighborMock) GetUtxosCalls() []struct {
	Address string
} {
	var calls []struct {
		Address string
	}
	mock.lockGetUtxos.RLock()
	calls = mock.calls.GetUtxos
	mock.lockGetUtxos.RUnlock()
	return calls
}

// SendTargets calls SendTargetsFunc.
func (mock *NeighborMock) SendTargets(request []network.TargetRequest) error {
	if mock.SendTargetsFunc == nil {
		panic("NeighborMock.SendTargetsFunc: method is nil but Neighbor.SendTargets was just called")
	}
	callInfo := struct {
		Request []network.TargetRequest
	}{
		Request: request,
	}
	mock.lockSendTargets.Lock()
	mock.calls.SendTargets = append(mock.calls.SendTargets, callInfo)
	mock.lockSendTargets.Unlock()
	return mock.SendTargetsFunc(request)
}

// SendTargetsCalls gets all the calls that were made to SendTargets.
// Check the length with:
//
//	len(mockedNeighbor.SendTargetsCalls())
func (mock *NeighborMock) SendTargetsCalls() []struct {
	Request []network.TargetRequest
} {
	var calls []struct {
		Request []network.TargetRequest
	}
	mock.lockSendTargets.RLock()
	calls = mock.calls.SendTargets
	mock.lockSendTargets.RUnlock()
	return calls
}

// Target calls TargetFunc.
func (mock *NeighborMock) Target() string {
	if mock.TargetFunc == nil {
		panic("NeighborMock.TargetFunc: method is nil but Neighbor.Target was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTarget.Lock()
	mock.calls.Target = append(mock.calls.Target, callInfo)
	mock.lockTarget.Unlock()
	return mock.TargetFunc()
}

// TargetCalls gets all the calls that were made to Target.
// Check the length with:
//
//	len(mockedNeighbor.TargetCalls())
func (mock *NeighborMock) TargetCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTarget.RLock()
	calls = mock.calls.Target
	mock.lockTarget.RUnlock()
	return calls
}
