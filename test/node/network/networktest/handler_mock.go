// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package networktest

import (
	"context"
	gp2p "github.com/leprosus/golang-p2p"
	"github.com/my-cloud/ruthenium/src/node/network"
	"sync"
)

// Ensure, that HandlerMock does implement Handler.
// If this is not the case, regenerate this file with moq.
var _ network.Handler = &HandlerMock{}

// HandlerMock is a mock implementation of Handler.
//
//	func TestSomethingThatUsesHandler(t *testing.T) {
//
//		// make and configure a mocked Handler
//		mockedHandler := &HandlerMock{
//			HandleBlocksRequestFunc: func(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error) {
//				panic("mock out the HandleBlocksRequest method")
//			},
//			HandleFirstBlockTimestampRequestFunc: func(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error) {
//				panic("mock out the HandleFirstBlockTimestampRequest method")
//			},
//			HandleLastBlockTimestampRequestFunc: func(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error) {
//				panic("mock out the HandleLastBlockTimestampRequest method")
//			},
//			HandleTargetsRequestFunc: func(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error) {
//				panic("mock out the HandleTargetsRequest method")
//			},
//			HandleTransactionRequestFunc: func(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error) {
//				panic("mock out the HandleTransactionRequest method")
//			},
//			HandleTransactionsRequestFunc: func(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error) {
//				panic("mock out the HandleTransactionsRequest method")
//			},
//			HandleUtxosRequestFunc: func(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error) {
//				panic("mock out the HandleUtxosRequest method")
//			},
//		}
//
//		// use mockedHandler in code that requires Handler
//		// and then make assertions.
//
//	}
type HandlerMock struct {
	// HandleBlocksRequestFunc mocks the HandleBlocksRequest method.
	HandleBlocksRequestFunc func(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error)

	// HandleFirstBlockTimestampRequestFunc mocks the HandleFirstBlockTimestampRequest method.
	HandleFirstBlockTimestampRequestFunc func(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error)

	// HandleLastBlockTimestampRequestFunc mocks the HandleLastBlockTimestampRequest method.
	HandleLastBlockTimestampRequestFunc func(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error)

	// HandleTargetsRequestFunc mocks the HandleTargetsRequest method.
	HandleTargetsRequestFunc func(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error)

	// HandleTransactionRequestFunc mocks the HandleTransactionRequest method.
	HandleTransactionRequestFunc func(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error)

	// HandleTransactionsRequestFunc mocks the HandleTransactionsRequest method.
	HandleTransactionsRequestFunc func(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error)

	// HandleUtxosRequestFunc mocks the HandleUtxosRequest method.
	HandleUtxosRequestFunc func(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error)

	// calls tracks calls to the methods.
	calls struct {
		// HandleBlocksRequest holds details about calls to the HandleBlocksRequest method.
		HandleBlocksRequest []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Req is the req argument value.
			Req gp2p.Data
		}
		// HandleFirstBlockTimestampRequest holds details about calls to the HandleFirstBlockTimestampRequest method.
		HandleFirstBlockTimestampRequest []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Req is the req argument value.
			Req gp2p.Data
		}
		// HandleLastBlockTimestampRequest holds details about calls to the HandleLastBlockTimestampRequest method.
		HandleLastBlockTimestampRequest []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Req is the req argument value.
			Req gp2p.Data
		}
		// HandleTargetsRequest holds details about calls to the HandleTargetsRequest method.
		HandleTargetsRequest []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Req is the req argument value.
			Req gp2p.Data
		}
		// HandleTransactionRequest holds details about calls to the HandleTransactionRequest method.
		HandleTransactionRequest []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Req is the req argument value.
			Req gp2p.Data
		}
		// HandleTransactionsRequest holds details about calls to the HandleTransactionsRequest method.
		HandleTransactionsRequest []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Req is the req argument value.
			Req gp2p.Data
		}
		// HandleUtxosRequest holds details about calls to the HandleUtxosRequest method.
		HandleUtxosRequest []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Req is the req argument value.
			Req gp2p.Data
		}
	}
	lockHandleBlocksRequest              sync.RWMutex
	lockHandleFirstBlockTimestampRequest sync.RWMutex
	lockHandleLastBlockTimestampRequest  sync.RWMutex
	lockHandleTargetsRequest             sync.RWMutex
	lockHandleTransactionRequest         sync.RWMutex
	lockHandleTransactionsRequest        sync.RWMutex
	lockHandleUtxosRequest               sync.RWMutex
}

// HandleBlocksRequest calls HandleBlocksRequestFunc.
func (mock *HandlerMock) HandleBlocksRequest(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error) {
	if mock.HandleBlocksRequestFunc == nil {
		panic("HandlerMock.HandleBlocksRequestFunc: method is nil but Handler.HandleBlocksRequest was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Req             gp2p.Data
	}{
		ContextMoqParam: contextMoqParam,
		Req:             req,
	}
	mock.lockHandleBlocksRequest.Lock()
	mock.calls.HandleBlocksRequest = append(mock.calls.HandleBlocksRequest, callInfo)
	mock.lockHandleBlocksRequest.Unlock()
	return mock.HandleBlocksRequestFunc(contextMoqParam, req)
}

// HandleBlocksRequestCalls gets all the calls that were made to HandleBlocksRequest.
// Check the length with:
//
//	len(mockedHandler.HandleBlocksRequestCalls())
func (mock *HandlerMock) HandleBlocksRequestCalls() []struct {
	ContextMoqParam context.Context
	Req             gp2p.Data
} {
	var calls []struct {
		ContextMoqParam context.Context
		Req             gp2p.Data
	}
	mock.lockHandleBlocksRequest.RLock()
	calls = mock.calls.HandleBlocksRequest
	mock.lockHandleBlocksRequest.RUnlock()
	return calls
}

// HandleFirstBlockTimestampRequest calls HandleFirstBlockTimestampRequestFunc.
func (mock *HandlerMock) HandleFirstBlockTimestampRequest(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error) {
	if mock.HandleFirstBlockTimestampRequestFunc == nil {
		panic("HandlerMock.HandleFirstBlockTimestampRequestFunc: method is nil but Handler.HandleFirstBlockTimestampRequest was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Req             gp2p.Data
	}{
		ContextMoqParam: contextMoqParam,
		Req:             req,
	}
	mock.lockHandleFirstBlockTimestampRequest.Lock()
	mock.calls.HandleFirstBlockTimestampRequest = append(mock.calls.HandleFirstBlockTimestampRequest, callInfo)
	mock.lockHandleFirstBlockTimestampRequest.Unlock()
	return mock.HandleFirstBlockTimestampRequestFunc(contextMoqParam, req)
}

// HandleFirstBlockTimestampRequestCalls gets all the calls that were made to HandleFirstBlockTimestampRequest.
// Check the length with:
//
//	len(mockedHandler.HandleFirstBlockTimestampRequestCalls())
func (mock *HandlerMock) HandleFirstBlockTimestampRequestCalls() []struct {
	ContextMoqParam context.Context
	Req             gp2p.Data
} {
	var calls []struct {
		ContextMoqParam context.Context
		Req             gp2p.Data
	}
	mock.lockHandleFirstBlockTimestampRequest.RLock()
	calls = mock.calls.HandleFirstBlockTimestampRequest
	mock.lockHandleFirstBlockTimestampRequest.RUnlock()
	return calls
}

// HandleLastBlockTimestampRequest calls HandleLastBlockTimestampRequestFunc.
func (mock *HandlerMock) HandleLastBlockTimestampRequest(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error) {
	if mock.HandleLastBlockTimestampRequestFunc == nil {
		panic("HandlerMock.HandleLastBlockTimestampRequestFunc: method is nil but Handler.HandleLastBlockTimestampRequest was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Req             gp2p.Data
	}{
		ContextMoqParam: contextMoqParam,
		Req:             req,
	}
	mock.lockHandleLastBlockTimestampRequest.Lock()
	mock.calls.HandleLastBlockTimestampRequest = append(mock.calls.HandleLastBlockTimestampRequest, callInfo)
	mock.lockHandleLastBlockTimestampRequest.Unlock()
	return mock.HandleLastBlockTimestampRequestFunc(contextMoqParam, req)
}

// HandleLastBlockTimestampRequestCalls gets all the calls that were made to HandleLastBlockTimestampRequest.
// Check the length with:
//
//	len(mockedHandler.HandleLastBlockTimestampRequestCalls())
func (mock *HandlerMock) HandleLastBlockTimestampRequestCalls() []struct {
	ContextMoqParam context.Context
	Req             gp2p.Data
} {
	var calls []struct {
		ContextMoqParam context.Context
		Req             gp2p.Data
	}
	mock.lockHandleLastBlockTimestampRequest.RLock()
	calls = mock.calls.HandleLastBlockTimestampRequest
	mock.lockHandleLastBlockTimestampRequest.RUnlock()
	return calls
}

// HandleTargetsRequest calls HandleTargetsRequestFunc.
func (mock *HandlerMock) HandleTargetsRequest(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error) {
	if mock.HandleTargetsRequestFunc == nil {
		panic("HandlerMock.HandleTargetsRequestFunc: method is nil but Handler.HandleTargetsRequest was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Req             gp2p.Data
	}{
		ContextMoqParam: contextMoqParam,
		Req:             req,
	}
	mock.lockHandleTargetsRequest.Lock()
	mock.calls.HandleTargetsRequest = append(mock.calls.HandleTargetsRequest, callInfo)
	mock.lockHandleTargetsRequest.Unlock()
	return mock.HandleTargetsRequestFunc(contextMoqParam, req)
}

// HandleTargetsRequestCalls gets all the calls that were made to HandleTargetsRequest.
// Check the length with:
//
//	len(mockedHandler.HandleTargetsRequestCalls())
func (mock *HandlerMock) HandleTargetsRequestCalls() []struct {
	ContextMoqParam context.Context
	Req             gp2p.Data
} {
	var calls []struct {
		ContextMoqParam context.Context
		Req             gp2p.Data
	}
	mock.lockHandleTargetsRequest.RLock()
	calls = mock.calls.HandleTargetsRequest
	mock.lockHandleTargetsRequest.RUnlock()
	return calls
}

// HandleTransactionRequest calls HandleTransactionRequestFunc.
func (mock *HandlerMock) HandleTransactionRequest(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error) {
	if mock.HandleTransactionRequestFunc == nil {
		panic("HandlerMock.HandleTransactionRequestFunc: method is nil but Handler.HandleTransactionRequest was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Req             gp2p.Data
	}{
		ContextMoqParam: contextMoqParam,
		Req:             req,
	}
	mock.lockHandleTransactionRequest.Lock()
	mock.calls.HandleTransactionRequest = append(mock.calls.HandleTransactionRequest, callInfo)
	mock.lockHandleTransactionRequest.Unlock()
	return mock.HandleTransactionRequestFunc(contextMoqParam, req)
}

// HandleTransactionRequestCalls gets all the calls that were made to HandleTransactionRequest.
// Check the length with:
//
//	len(mockedHandler.HandleTransactionRequestCalls())
func (mock *HandlerMock) HandleTransactionRequestCalls() []struct {
	ContextMoqParam context.Context
	Req             gp2p.Data
} {
	var calls []struct {
		ContextMoqParam context.Context
		Req             gp2p.Data
	}
	mock.lockHandleTransactionRequest.RLock()
	calls = mock.calls.HandleTransactionRequest
	mock.lockHandleTransactionRequest.RUnlock()
	return calls
}

// HandleTransactionsRequest calls HandleTransactionsRequestFunc.
func (mock *HandlerMock) HandleTransactionsRequest(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error) {
	if mock.HandleTransactionsRequestFunc == nil {
		panic("HandlerMock.HandleTransactionsRequestFunc: method is nil but Handler.HandleTransactionsRequest was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Req             gp2p.Data
	}{
		ContextMoqParam: contextMoqParam,
		Req:             req,
	}
	mock.lockHandleTransactionsRequest.Lock()
	mock.calls.HandleTransactionsRequest = append(mock.calls.HandleTransactionsRequest, callInfo)
	mock.lockHandleTransactionsRequest.Unlock()
	return mock.HandleTransactionsRequestFunc(contextMoqParam, req)
}

// HandleTransactionsRequestCalls gets all the calls that were made to HandleTransactionsRequest.
// Check the length with:
//
//	len(mockedHandler.HandleTransactionsRequestCalls())
func (mock *HandlerMock) HandleTransactionsRequestCalls() []struct {
	ContextMoqParam context.Context
	Req             gp2p.Data
} {
	var calls []struct {
		ContextMoqParam context.Context
		Req             gp2p.Data
	}
	mock.lockHandleTransactionsRequest.RLock()
	calls = mock.calls.HandleTransactionsRequest
	mock.lockHandleTransactionsRequest.RUnlock()
	return calls
}

// HandleUtxosRequest calls HandleUtxosRequestFunc.
func (mock *HandlerMock) HandleUtxosRequest(contextMoqParam context.Context, req gp2p.Data) (gp2p.Data, error) {
	if mock.HandleUtxosRequestFunc == nil {
		panic("HandlerMock.HandleUtxosRequestFunc: method is nil but Handler.HandleUtxosRequest was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Req             gp2p.Data
	}{
		ContextMoqParam: contextMoqParam,
		Req:             req,
	}
	mock.lockHandleUtxosRequest.Lock()
	mock.calls.HandleUtxosRequest = append(mock.calls.HandleUtxosRequest, callInfo)
	mock.lockHandleUtxosRequest.Unlock()
	return mock.HandleUtxosRequestFunc(contextMoqParam, req)
}

// HandleUtxosRequestCalls gets all the calls that were made to HandleUtxosRequest.
// Check the length with:
//
//	len(mockedHandler.HandleUtxosRequestCalls())
func (mock *HandlerMock) HandleUtxosRequestCalls() []struct {
	ContextMoqParam context.Context
	Req             gp2p.Data
} {
	var calls []struct {
		ContextMoqParam context.Context
		Req             gp2p.Data
	}
	mock.lockHandleUtxosRequest.RLock()
	calls = mock.calls.HandleUtxosRequest
	mock.lockHandleUtxosRequest.RUnlock()
	return calls
}
