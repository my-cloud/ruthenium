// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package network

import (
	"github.com/my-cloud/ruthenium/src/node/network"
	"sync"
)

// Ensure, that SenderFactoryMock does implement SenderFactory.
// If this is not the case, regenerate this file with moq.
var _ network.SenderFactory = &SenderFactoryMock{}

// SenderFactoryMock is a mock implementation of SenderFactory.
//
// 	func TestSomethingThatUsesSenderFactory(t *testing.T) {
//
// 		// make and configure a mocked SenderFactory
// 		mockedSenderFactory := &SenderFactoryMock{
// 			CreateSenderFunc: func(ip string, port uint16, target string) (Sender, error) {
// 				panic("mock out the CreateSender method")
// 			},
// 		}
//
// 		// use mockedSenderFactory in code that requires SenderFactory
// 		// and then make assertions.
//
// 	}
type SenderFactoryMock struct {
	// CreateSenderFunc mocks the CreateSender method.
	CreateSenderFunc func(ip string, port uint16, target string) (network.Sender, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateSender holds details about calls to the CreateSender method.
		CreateSender []struct {
			// IP is the ip argument value.
			IP string
			// Port is the port argument value.
			Port uint16
			// Target is the target argument value.
			Target string
		}
	}
	lockCreateSender sync.RWMutex
}

// CreateSender calls CreateSenderFunc.
func (mock *SenderFactoryMock) CreateSender(ip string, port uint16, target string) (network.Sender, error) {
	if mock.CreateSenderFunc == nil {
		panic("SenderFactoryMock.CreateSenderFunc: method is nil but SenderFactory.CreateSender was just called")
	}
	callInfo := struct {
		IP     string
		Port   uint16
		Target string
	}{
		IP:     ip,
		Port:   port,
		Target: target,
	}
	mock.lockCreateSender.Lock()
	mock.calls.CreateSender = append(mock.calls.CreateSender, callInfo)
	mock.lockCreateSender.Unlock()
	return mock.CreateSenderFunc(ip, port, target)
}

// CreateSenderCalls gets all the calls that were made to CreateSender.
// Check the length with:
//     len(mockedSenderFactory.CreateSenderCalls())
func (mock *SenderFactoryMock) CreateSenderCalls() []struct {
	IP     string
	Port   uint16
	Target string
} {
	var calls []struct {
		IP     string
		Port   uint16
		Target string
	}
	mock.lockCreateSender.RLock()
	calls = mock.calls.CreateSender
	mock.lockCreateSender.RUnlock()
	return calls
}
