// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package network

import (
	"sync"
)

// Ensure, that SendersManagerMock does implement SendersManager.
// If this is not the case, regenerate this file with moq.
var _ SendersManager = &SendersManagerMock{}

// SendersManagerMock is a mock implementation of SendersManager.
//
//	func TestSomethingThatUsesSendersManager(t *testing.T) {
//
//		// make and configure a mocked SendersManager
//		mockedSendersManager := &SendersManagerMock{
//			AddTargetsFunc: func(targets []string)  {
//				panic("mock out the AddTargets method")
//			},
//			HostTargetFunc: func() string {
//				panic("mock out the HostTarget method")
//			},
//			IncentiveFunc: func(target string)  {
//				panic("mock out the Incentive method")
//			},
//			SendersFunc: func() []Sender {
//				panic("mock out the Senders method")
//			},
//		}
//
//		// use mockedSendersManager in code that requires SendersManager
//		// and then make assertions.
//
//	}
type SendersManagerMock struct {
	// AddTargetsFunc mocks the AddTargets method.
	AddTargetsFunc func(targets []string)

	// HostTargetFunc mocks the HostTarget method.
	HostTargetFunc func() string

	// IncentiveFunc mocks the Incentive method.
	IncentiveFunc func(target string)

	// SendersFunc mocks the Senders method.
	SendersFunc func() []Sender

	// calls tracks calls to the methods.
	calls struct {
		// AddTargets holds details about calls to the AddTargets method.
		AddTargets []struct {
			// Targets is the targets argument value.
			Targets []string
		}
		// HostTarget holds details about calls to the HostTarget method.
		HostTarget []struct {
		}
		// Incentive holds details about calls to the Incentive method.
		Incentive []struct {
			// Target is the target argument value.
			Target string
		}
		// Senders holds details about calls to the Senders method.
		Senders []struct {
		}
	}
	lockAddTargets sync.RWMutex
	lockHostTarget sync.RWMutex
	lockIncentive  sync.RWMutex
	lockSenders    sync.RWMutex
}

// AddTargets calls AddTargetsFunc.
func (mock *SendersManagerMock) AddTargets(targets []string) {
	if mock.AddTargetsFunc == nil {
		panic("SendersManagerMock.AddTargetsFunc: method is nil but SendersManager.AddTargets was just called")
	}
	callInfo := struct {
		Targets []string
	}{
		Targets: targets,
	}
	mock.lockAddTargets.Lock()
	mock.calls.AddTargets = append(mock.calls.AddTargets, callInfo)
	mock.lockAddTargets.Unlock()
	mock.AddTargetsFunc(targets)
}

// AddTargetsCalls gets all the calls that were made to AddTargets.
// Check the length with:
//
//	len(mockedSendersManager.AddTargetsCalls())
func (mock *SendersManagerMock) AddTargetsCalls() []struct {
	Targets []string
} {
	var calls []struct {
		Targets []string
	}
	mock.lockAddTargets.RLock()
	calls = mock.calls.AddTargets
	mock.lockAddTargets.RUnlock()
	return calls
}

// HostTarget calls HostTargetFunc.
func (mock *SendersManagerMock) HostTarget() string {
	if mock.HostTargetFunc == nil {
		panic("SendersManagerMock.HostTargetFunc: method is nil but SendersManager.HostTarget was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHostTarget.Lock()
	mock.calls.HostTarget = append(mock.calls.HostTarget, callInfo)
	mock.lockHostTarget.Unlock()
	return mock.HostTargetFunc()
}

// HostTargetCalls gets all the calls that were made to HostTarget.
// Check the length with:
//
//	len(mockedSendersManager.HostTargetCalls())
func (mock *SendersManagerMock) HostTargetCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHostTarget.RLock()
	calls = mock.calls.HostTarget
	mock.lockHostTarget.RUnlock()
	return calls
}

// Incentive calls IncentiveFunc.
func (mock *SendersManagerMock) Incentive(target string) {
	if mock.IncentiveFunc == nil {
		panic("SendersManagerMock.IncentiveFunc: method is nil but SendersManager.Incentive was just called")
	}
	callInfo := struct {
		Target string
	}{
		Target: target,
	}
	mock.lockIncentive.Lock()
	mock.calls.Incentive = append(mock.calls.Incentive, callInfo)
	mock.lockIncentive.Unlock()
	mock.IncentiveFunc(target)
}

// IncentiveCalls gets all the calls that were made to Incentive.
// Check the length with:
//
//	len(mockedSendersManager.IncentiveCalls())
func (mock *SendersManagerMock) IncentiveCalls() []struct {
	Target string
} {
	var calls []struct {
		Target string
	}
	mock.lockIncentive.RLock()
	calls = mock.calls.Incentive
	mock.lockIncentive.RUnlock()
	return calls
}

// Senders calls SendersFunc.
func (mock *SendersManagerMock) Senders() []Sender {
	if mock.SendersFunc == nil {
		panic("SendersManagerMock.SendersFunc: method is nil but SendersManager.Senders was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSenders.Lock()
	mock.calls.Senders = append(mock.calls.Senders, callInfo)
	mock.lockSenders.Unlock()
	return mock.SendersFunc()
}

// SendersCalls gets all the calls that were made to Senders.
// Check the length with:
//
//	len(mockedSendersManager.SendersCalls())
func (mock *SendersManagerMock) SendersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSenders.RLock()
	calls = mock.calls.Senders
	mock.lockSenders.RUnlock()
	return calls
}
