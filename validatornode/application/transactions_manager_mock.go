// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package application

import (
	"github.com/my-cloud/ruthenium/validatornode/domain/protocol"
	"sync"
)

// Ensure, that TransactionsManagerMock does implement TransactionsManager.
// If this is not the case, regenerate this file with moq.
var _ TransactionsManager = &TransactionsManagerMock{}

// TransactionsManagerMock is a mock implementation of TransactionsManager.
//
//	func TestSomethingThatUsesTransactionsManager(t *testing.T) {
//
//		// make and configure a mocked TransactionsManager
//		mockedTransactionsManager := &TransactionsManagerMock{
//			AddTransactionFunc: func(transaction *protocol.Transaction, broadcasterTarget string, hostTarget string)  {
//				panic("mock out the AddTransaction method")
//			},
//			TransactionsFunc: func() []*protocol.Transaction {
//				panic("mock out the Transactions method")
//			},
//		}
//
//		// use mockedTransactionsManager in code that requires TransactionsManager
//		// and then make assertions.
//
//	}
type TransactionsManagerMock struct {
	// AddTransactionFunc mocks the AddTransaction method.
	AddTransactionFunc func(transaction *protocol.Transaction, broadcasterTarget string, hostTarget string)

	// TransactionsFunc mocks the Transactions method.
	TransactionsFunc func() []*protocol.Transaction

	// calls tracks calls to the methods.
	calls struct {
		// AddTransaction holds details about calls to the AddTransaction method.
		AddTransaction []struct {
			// Transaction is the transaction argument value.
			Transaction *protocol.Transaction
			// BroadcasterTarget is the broadcasterTarget argument value.
			BroadcasterTarget string
			// HostTarget is the hostTarget argument value.
			HostTarget string
		}
		// Transactions holds details about calls to the Transactions method.
		Transactions []struct {
		}
	}
	lockAddTransaction sync.RWMutex
	lockTransactions   sync.RWMutex
}

// AddTransaction calls AddTransactionFunc.
func (mock *TransactionsManagerMock) AddTransaction(transaction *protocol.Transaction, broadcasterTarget string, hostTarget string) {
	if mock.AddTransactionFunc == nil {
		panic("TransactionsManagerMock.AddTransactionFunc: method is nil but TransactionsManager.AddTransaction was just called")
	}
	callInfo := struct {
		Transaction       *protocol.Transaction
		BroadcasterTarget string
		HostTarget        string
	}{
		Transaction:       transaction,
		BroadcasterTarget: broadcasterTarget,
		HostTarget:        hostTarget,
	}
	mock.lockAddTransaction.Lock()
	mock.calls.AddTransaction = append(mock.calls.AddTransaction, callInfo)
	mock.lockAddTransaction.Unlock()
	mock.AddTransactionFunc(transaction, broadcasterTarget, hostTarget)
}

// AddTransactionCalls gets all the calls that were made to AddTransaction.
// Check the length with:
//
//	len(mockedTransactionsManager.AddTransactionCalls())
func (mock *TransactionsManagerMock) AddTransactionCalls() []struct {
	Transaction       *protocol.Transaction
	BroadcasterTarget string
	HostTarget        string
} {
	var calls []struct {
		Transaction       *protocol.Transaction
		BroadcasterTarget string
		HostTarget        string
	}
	mock.lockAddTransaction.RLock()
	calls = mock.calls.AddTransaction
	mock.lockAddTransaction.RUnlock()
	return calls
}

// Transactions calls TransactionsFunc.
func (mock *TransactionsManagerMock) Transactions() []*protocol.Transaction {
	if mock.TransactionsFunc == nil {
		panic("TransactionsManagerMock.TransactionsFunc: method is nil but TransactionsManager.Transactions was just called")
	}
	callInfo := struct {
	}{}
	mock.lockTransactions.Lock()
	mock.calls.Transactions = append(mock.calls.Transactions, callInfo)
	mock.lockTransactions.Unlock()
	return mock.TransactionsFunc()
}

// TransactionsCalls gets all the calls that were made to Transactions.
// Check the length with:
//
//	len(mockedTransactionsManager.TransactionsCalls())
func (mock *TransactionsManagerMock) TransactionsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockTransactions.RLock()
	calls = mock.calls.Transactions
	mock.lockTransactions.RUnlock()
	return calls
}
