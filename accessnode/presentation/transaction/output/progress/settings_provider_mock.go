// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package progress

import (
	"sync"
)

// Ensure, that SettingsProviderMock does implement SettingsProvider.
// If this is not the case, regenerate this file with moq.
var _ SettingsProvider = &SettingsProviderMock{}

// SettingsProviderMock is a mock implementation of SettingsProvider.
//
//	func TestSomethingThatUsesSettingsProvider(t *testing.T) {
//
//		// make and configure a mocked SettingsProvider
//		mockedSettingsProvider := &SettingsProviderMock{
//			ValidationTimestampFunc: func() int64 {
//				panic("mock out the ValidationTimestamp method")
//			},
//		}
//
//		// use mockedSettingsProvider in code that requires SettingsProvider
//		// and then make assertions.
//
//	}
type SettingsProviderMock struct {
	// ValidationTimestampFunc mocks the ValidationTimestamp method.
	ValidationTimestampFunc func() int64

	// calls tracks calls to the methods.
	calls struct {
		// ValidationTimestamp holds details about calls to the ValidationTimestamp method.
		ValidationTimestamp []struct {
		}
	}
	lockValidationTimestamp sync.RWMutex
}

// ValidationTimestamp calls ValidationTimestampFunc.
func (mock *SettingsProviderMock) ValidationTimestamp() int64 {
	if mock.ValidationTimestampFunc == nil {
		panic("SettingsProviderMock.ValidationTimestampFunc: method is nil but SettingsProvider.ValidationTimestamp was just called")
	}
	callInfo := struct {
	}{}
	mock.lockValidationTimestamp.Lock()
	mock.calls.ValidationTimestamp = append(mock.calls.ValidationTimestamp, callInfo)
	mock.lockValidationTimestamp.Unlock()
	return mock.ValidationTimestampFunc()
}

// ValidationTimestampCalls gets all the calls that were made to ValidationTimestamp.
// Check the length with:
//
//	len(mockedSettingsProvider.ValidationTimestampCalls())
func (mock *SettingsProviderMock) ValidationTimestampCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockValidationTimestamp.RLock()
	calls = mock.calls.ValidationTimestamp
	mock.lockValidationTimestamp.RUnlock()
	return calls
}
