// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package p2p

import (
	"sync"
	"time"
)

// Ensure, that SettingsProviderMock does implement SettingsProvider.
// If this is not the case, regenerate this file with moq.
var _ SettingsProvider = &SettingsProviderMock{}

// SettingsProviderMock is a mock implementation of SettingsProvider.
//
//	func TestSomethingThatUsesSettingsProvider(t *testing.T) {
//
//		// make and configure a mocked SettingsProvider
//		mockedSettingsProvider := &SettingsProviderMock{
//			ValidationTimeoutFunc: func() time.Duration {
//				panic("mock out the ValidationTimeout method")
//			},
//		}
//
//		// use mockedSettingsProvider in code that requires SettingsProvider
//		// and then make assertions.
//
//	}
type SettingsProviderMock struct {
	// ValidationTimeoutFunc mocks the ValidationTimeout method.
	ValidationTimeoutFunc func() time.Duration

	// calls tracks calls to the methods.
	calls struct {
		// ValidationTimeout holds details about calls to the ValidationTimeout method.
		ValidationTimeout []struct {
		}
	}
	lockValidationTimeout sync.RWMutex
}

// ValidationTimeout calls ValidationTimeoutFunc.
func (mock *SettingsProviderMock) ValidationTimeout() time.Duration {
	if mock.ValidationTimeoutFunc == nil {
		panic("SettingsProviderMock.ValidationTimeoutFunc: method is nil but SettingsProvider.ValidationTimeout was just called")
	}
	callInfo := struct {
	}{}
	mock.lockValidationTimeout.Lock()
	mock.calls.ValidationTimeout = append(mock.calls.ValidationTimeout, callInfo)
	mock.lockValidationTimeout.Unlock()
	return mock.ValidationTimeoutFunc()
}

// ValidationTimeoutCalls gets all the calls that were made to ValidationTimeout.
// Check the length with:
//
//	len(mockedSettingsProvider.ValidationTimeoutCalls())
func (mock *SettingsProviderMock) ValidationTimeoutCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockValidationTimeout.RLock()
	calls = mock.calls.ValidationTimeout
	mock.lockValidationTimeout.RUnlock()
	return calls
}
