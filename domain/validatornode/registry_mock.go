// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package validatornode

import (
	"sync"
)

// Ensure, that RegistryMock does implement Registry.
// If this is not the case, regenerate this file with moq.
var _ Registry = &RegistryMock{}

// RegistryMock is a mock implementation of Registry.
//
//	func TestSomethingThatUsesRegistry(t *testing.T) {
//
//		// make and configure a mocked Registry
//		mockedRegistry := &RegistryMock{
//			IsRegisteredFunc: func(address string) (bool, error) {
//				panic("mock out the IsRegistered method")
//			},
//		}
//
//		// use mockedRegistry in code that requires Registry
//		// and then make assertions.
//
//	}
type RegistryMock struct {
	// IsRegisteredFunc mocks the IsRegistered method.
	IsRegisteredFunc func(address string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// IsRegistered holds details about calls to the IsRegistered method.
		IsRegistered []struct {
			// Address is the address argument value.
			Address string
		}
	}
	lockIsRegistered sync.RWMutex
}

// IsRegistered calls IsRegisteredFunc.
func (mock *RegistryMock) IsRegistered(address string) (bool, error) {
	if mock.IsRegisteredFunc == nil {
		panic("RegistryMock.IsRegisteredFunc: method is nil but Registry.IsRegistered was just called")
	}
	callInfo := struct {
		Address string
	}{
		Address: address,
	}
	mock.lockIsRegistered.Lock()
	mock.calls.IsRegistered = append(mock.calls.IsRegistered, callInfo)
	mock.lockIsRegistered.Unlock()
	return mock.IsRegisteredFunc(address)
}

// IsRegisteredCalls gets all the calls that were made to IsRegistered.
// Check the length with:
//
//	len(mockedRegistry.IsRegisteredCalls())
func (mock *RegistryMock) IsRegisteredCalls() []struct {
	Address string
} {
	var calls []struct {
		Address string
	}
	mock.lockIsRegistered.RLock()
	calls = mock.calls.IsRegistered
	mock.lockIsRegistered.RUnlock()
	return calls
}
