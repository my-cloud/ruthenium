{{ if eq .Values.app.type "statefulset" }}
---
{{- $chartName := .Chart.Name -}}
{{- $appVersion := .Values.AppVersion | default .Chart.Version -}}
{{- $global := .Values.global }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    reloader.stakater.com/auto: {{ .Values.app.AutoReload | default .Values.global.autoReload | quote }}
    role: {{ $chartName }}
    {{- if .Values.app.annotations -}}
    {{ .Values.app.annotations | nindent 4 -}}
    {{- end }}
  labels:
    group: {{ $chartName }}
    app: {{ $chartName }}
    version: "{{ $appVersion }}"
  name: {{ $chartName }}
spec:
  selector:
    matchLabels:
      app: {{ $chartName }} # has to match .spec.template.metadata.labels
  serviceName: {{ $chartName }}
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  replicas: {{ .Values.app.replicas }}
  template:
    metadata:
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
      labels:
        group: {{ $chartName }}
        app: {{ $chartName }}
        version: "{{ $appVersion }}"
    spec:
      serviceAccountName: {{ $chartName }}
      imagePullSecrets: {{- range $global.registries }}
      - name: {{ .name }}
      {{- end }}
      containers:
      {{- range $container := .Values.app.containers }}
      - env: {{- range $key, $value := $container.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
        {{- end }}
        {{- range $secretName, $rawValue := $container.secret }}
        {{- range $envName, $secretKey := $rawValue }}
          - name: {{ $envName }}
            valueFrom:
              secretKeyRef:
                name: {{ $secretName }}
                key: {{ $secretKey }}
        {{- end }}
        {{- end }}
        image: {{ $container.image.name }}:{{ $container.image.tagOverride | default $appVersion }}
        imagePullPolicy: {{ $container.image.pullPolicy | default $global.image.pullPolicy }}
        name: {{ $chartName }}-{{ $container.name }}
        command: {{ $container.command }}
        args: {{ $container.args }}
        resources:
          requests:
            memory: {{ $container.resources.requests.memory }}
            cpu: {{ $containers.resources.requests.cpu }}
            ephemeral-storage: {{ $containers.resources.requests.storage }}
          limits:
            memory: {{ $container.resources.limits.memory }}
            cpu: {{ $containers.resources.limits.cpu }}
            ephemeral-storage: {{ $containers.resources.limits.storage }}
        ports:
        {{- range $container.service }}
          - name: {{ $container.name }}
            containerPort: {{ .targetPort }}
            protocol: {{ .protocol }}
        {{- end }}
        {{- if $container.health }}
        {{- range $probe := list "liveness" "readiness" }}
        {{$probe}}Probe:
          {{- $probePath := (index $container.health $probe) }}
          initialDelaySeconds: {{ $probePath.initialDelaySeconds }}
          periodSeconds: {{ $probePath.periodSeconds }}
          timeoutSeconds: {{ $probePath.timeoutSeconds }}
          {{ $container.health.type |default "httpGet" }}:
          {{- with (first $container.service) }}
            port: {{ .targetPort }}
          {{- end }}
          {{- if eq $container.health.type "httpGet" }}
            path: {{ $probePath.path }}
            {{- if $probePath.httpHeaders }}
            httpHeaders:
              {{- range $headerName, $header := $probePath.httpHeaders }}
            - name: {{ $headerName }}
              value: {{ $header }}
              {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- end }}
        volumeMounts:
          {{- range $storageName, $mountPath := $container.storage }}
          - name: {{ $chartName }}-{{ $storageName }}
            mountPath: {{ $mountPath }}
          {{- end }}
      {{- end }}
      automountServiceAccountToken: false
      securityContext:
          fsGroup: 1000
      restartPolicy: Always
  volumeClaimTemplates:
  {{- range $storageName, $storage := .Values.app.storage }}
  - metadata:
      name: {{ $chartName }}-{{$storageName}}
    spec:
      accessModes:
      {{- range $storage.accessModes }}
      - {{ . }}
      {{- end }}
      storageClassName: {{ $storage.storageClass | quote }}
      resources:
        requests:
          storage: {{ $storage.size | quote }}
  {{end}}  
{{ end }}
